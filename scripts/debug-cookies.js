const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

console.log('üîç Diagn√≥stico de Cookies - Funeraria')
console.log('=====================================')

// Verificar variables de entorno
console.log('\nüîß Verificando variables de entorno...')
console.log(`   NEXT_PUBLIC_SUPABASE_URL: ${supabaseUrl ? '‚úÖ Configurado' : '‚ùå Faltante'}`)
console.log(`   NEXT_PUBLIC_SUPABASE_ANON_KEY: ${supabaseAnonKey ? '‚úÖ Configurado' : '‚ùå Faltante'}`)

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('\n‚ùå Faltan las variables de entorno de Supabase')
  console.log('\nüìù Para solucionarlo:')
  console.log('1. Crea un archivo .env.local en la ra√≠z del proyecto')
  console.log('2. Agrega las siguientes variables:')
  console.log('   NEXT_PUBLIC_SUPABASE_URL=https://tu-proyecto.supabase.co')
  console.log('   NEXT_PUBLIC_SUPABASE_ANON_KEY=tu-clave-anonima-aqui')
  console.log('3. Reinicia el servidor de desarrollo')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storageKey: 'supabase.auth.token'
  }
})

async function debugCookies() {
  try {
    // Verificar sesi√≥n actual
    console.log('\nüìä Verificando sesi√≥n actual...')
    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      console.error('‚ùå Error obteniendo sesi√≥n:', error)
    } else if (session) {
      console.log('‚úÖ Sesi√≥n activa encontrada')
      console.log(`   Usuario: ${session.user.email}`)
      console.log(`   Expira: ${new Date(session.expires_at * 1000).toLocaleString()}`)
    } else {
      console.log('üì≠ No hay sesi√≥n activa')
    }
    
    // Verificar configuraci√≥n de cookies
    console.log('\nüç™ Verificando configuraci√≥n de cookies...')
    
    // Simular verificaci√≥n de cookies del navegador
    console.log('‚ö†Ô∏è  Nota: Este script se ejecuta en Node.js, no en el navegador')
    console.log('   Para verificar cookies en el navegador, usa la consola:')
    console.log('   document.cookie')
    
    // Verificar configuraci√≥n de Supabase
    console.log('\n‚öôÔ∏è  Verificando configuraci√≥n de Supabase...')
    console.log('   Configuraci√≥n actual:')
    console.log('   - persistSession: true')
    console.log('   - autoRefreshToken: true')
    console.log('   - detectSessionInUrl: true')
    console.log('   - flowType: pkce')
    console.log('   - storageKey: supabase.auth.token')
    
    // Verificar archivos de configuraci√≥n
    console.log('\nüìÅ Verificando archivos de configuraci√≥n...')
    const fs = require('fs')
    const path = require('path')
    
    const configFiles = [
      'src/lib/supabase.ts',
      'src/lib/auth-config.ts',
      'src/middleware.ts'
    ]
    
    configFiles.forEach(file => {
      if (fs.existsSync(file)) {
        console.log(`   ‚úÖ ${file}: Existe`)
      } else {
        console.log(`   ‚ùå ${file}: No existe`)
      }
    })
    
    // Recomendaciones
    console.log('\nüí° Recomendaciones:')
    console.log('1. Verifica que las cookies est√©n habilitadas en el navegador')
    console.log('2. Aseg√∫rate de que el dominio est√© configurado correctamente')
    console.log('3. En producci√≥n, usa HTTPS para cookies seguras')
    console.log('4. Verifica que no haya bloqueadores de cookies activos')
    console.log('5. Usa el modo inc√≥gnito para probar sin interferencias')
    
    console.log('\n‚úÖ Diagn√≥stico completado')
    
  } catch (error) {
    console.error('‚ùå Error en el diagn√≥stico:', error)
  }
}

// Funci√≥n para verificar cookies espec√≠ficas
function checkSpecificCookies() {
  console.log('\nüîç Verificando cookies espec√≠ficas...')
  
  const expectedCookies = [
    'sb-auth-token',
    'supabase.auth.token',
    'sb-access-token',
    'sb-refresh-token'
  ]
  
  expectedCookies.forEach(cookieName => {
    console.log(`   ${cookieName}: Verificar en el navegador`)
  })
  
  console.log('\nüìù Para verificar en el navegador, ejecuta:')
  console.log('   console.log(document.cookie)')
  console.log('   localStorage.getItem("supabase.auth.token")')
  console.log('   sessionStorage.getItem("supabase.auth.token")')
  
  console.log('\nüßπ Para limpiar cookies manualmente:')
  console.log('   localStorage.clear()')
  console.log('   sessionStorage.clear()')
  console.log('   document.cookie.split(";").forEach(function(c) {')
  console.log('     document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");')
  console.log('   })')
}

debugCookies()
checkSpecificCookies() 