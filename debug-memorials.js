const { createClient } = require('@supabase/supabase-js')

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugMemorials() {
  console.log('üîç Diagn√≥stico de Memoriales')
  console.log('============================')
  
  try {
    // 1. Verificar conexi√≥n a Supabase
    console.log('\n1Ô∏è‚É£ Verificando conexi√≥n a Supabase...')
    const { data: testData, error: testError } = await supabase
      .from('user_roles')
      .select('id')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå Error de conexi√≥n:', testError)
      return
    }
    console.log('‚úÖ Conexi√≥n a Supabase exitosa')

    // 2. Verificar si la tabla plantillas existe y es accesible
    console.log('\n2Ô∏è‚É£ Verificando tabla plantillas...')
    const { data: tableData, error: tableError } = await supabase
      .from('plantillas')
      .select('id')
      .limit(1)
    
    if (tableError) {
      console.error('‚ùå Error con tabla plantillas:', tableError)
      console.log('\nüîß Posibles soluciones:')
      console.log('1. Verifica que la tabla plantillas existe')
      console.log('2. Verifica las pol√≠ticas RLS (Row Level Security)')
      console.log('3. Verifica que tienes permisos para acceder a la tabla')
      return
    }
    console.log('‚úÖ Tabla plantillas existe y es accesible')

    // 3. Verificar memoriales disponibles
    console.log('\n3Ô∏è‚É£ Verificando memoriales disponibles...')
    const { data: memorials, error: memorialsError } = await supabase
      .from('plantillas')
      .select('id, primer_nombre, apellido_paterno')
      .limit(5)
    
    if (memorialsError) {
      console.error('‚ùå Error al obtener memoriales:', memorialsError)
      return
    }
    
    if (!memorials || memorials.length === 0) {
      console.log('‚ö†Ô∏è No hay memoriales disponibles')
      console.log('Crea algunos memoriales primero usando la p√°gina de administraci√≥n')
      return
    }
    
    console.log(`‚úÖ Encontrados ${memorials.length} memoriales`)
    console.log('Memoriales disponibles:')
    memorials.forEach((memorial, index) => {
      console.log(`   ${index + 1}. ${memorial.primer_nombre} ${memorial.apellido_paterno} (ID: ${memorial.id})`)
    })

    // 4. Verificar pol√≠ticas RLS
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas RLS...')
    const { data: policies, error: policiesError } = await supabase
      .rpc('get_policies_info')
      .catch(() => ({ data: null, error: 'Funci√≥n no disponible' }))
    
    if (policiesError) {
      console.log('‚ö†Ô∏è No se pudo verificar pol√≠ticas RLS autom√°ticamente')
      console.log('Verifica manualmente las pol√≠ticas en el dashboard de Supabase')
    } else {
      console.log('‚úÖ Pol√≠ticas RLS verificadas')
    }

    // 5. Probar b√∫squeda espec√≠fica
    console.log('\n5Ô∏è‚É£ Probando b√∫squeda espec√≠fica...')
    const testMemorial = memorials[0]
    const { data: searchResult, error: searchError } = await supabase
      .from('plantillas')
      .select('id, primer_nombre, apellido_paterno')
      .ilike('primer_nombre', `%${testMemorial.primer_nombre}%`)
      .limit(1)
    
    if (searchError) {
      console.error('‚ùå Error en b√∫squeda:', searchError)
    } else if (searchResult && searchResult.length > 0) {
      console.log('‚úÖ B√∫squeda funciona correctamente')
    } else {
      console.log('‚ö†Ô∏è B√∫squeda no devuelve resultados esperados')
    }

    console.log('\nüéØ Resumen:')
    if (memorials && memorials.length > 0) {
      console.log('‚úÖ Los memoriales existen y son accesibles')
      console.log('‚úÖ La tabla plantillas est√° funcionando correctamente')
      console.log('üí° Si no ves memoriales en la aplicaci√≥n web, verifica:')
      console.log('   1. Que est√©s en la p√°gina correcta (/buscar)')
      console.log('   2. Que hayas ingresado un t√©rmino de b√∫squeda')
      console.log('   3. Que no haya errores en la consola del navegador')
    } else {
      console.log('‚ùå No hay memoriales en la base de datos')
      console.log('üí° Crea algunos memoriales usando la p√°gina de administraci√≥n')
    }

  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

debugMemorials() 