const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function testFavoritesFunctionality() {
  console.log('üß™ Probando funcionalidad de favoritos...')
  
  try {
    // 1. Verificar memoriales disponibles
    console.log('\n1Ô∏è‚É£ Verificando memoriales disponibles...')
    const { data: memorials, error: memorialsError } = await supabase
      .from('plantillas')
      .select('id, primer_nombre, apellido_paterno')
      .limit(3)
    
    if (memorialsError) {
      console.error('‚ùå Error al obtener memoriales:', memorialsError)
      return
    }
    
    if (!memorials || memorials.length === 0) {
      console.log('‚ö†Ô∏è No hay memoriales disponibles para probar')
      return
    }
    
    console.log(`‚úÖ Encontrados ${memorials.length} memoriales`)
    const testMemorial = memorials[0]
    console.log(`   Memorial de prueba: ${testMemorial.primer_nombre} ${testMemorial.apellido_paterno}`)
    console.log(`   ID: ${testMemorial.id}`)

    // 2. Verificar usuarios administradores
    console.log('\n2Ô∏è‚É£ Verificando usuarios administradores...')
    const { data: admins, error: adminsError } = await supabase
      .from('user_roles')
      .select('user_id, role')
      .eq('role', 'admin')
      .limit(3)
    
    if (adminsError) {
      console.error('‚ùå Error al obtener administradores:', adminsError)
      return
    }
    
    if (!admins || admins.length === 0) {
      console.log('‚ö†Ô∏è No hay usuarios administradores configurados')
      console.log('   Ejecuta: node make-admin.js para crear un admin')
      return
    }
    
    console.log(`‚úÖ Encontrados ${admins.length} administradores`)
    admins.forEach((admin, index) => {
      console.log(`   ${index + 1}. Admin ID: ${admin.user_id.slice(0, 8)}...`)
    })

    // 3. Verificar favoritos existentes
    console.log('\n3Ô∏è‚É£ Verificando favoritos existentes...')
    const { data: favorites, error: favoritesError } = await supabase
      .from('memorial_favorites')
      .select('id, user_id, memorial_id')
      .limit(5)
    
    if (favoritesError) {
      console.error('‚ùå Error al obtener favoritos:', favoritesError)
      return
    }
    
    console.log(`‚úÖ Encontrados ${favorites?.length || 0} favoritos existentes`)
    if (favorites && favorites.length > 0) {
      favorites.forEach((fav, index) => {
        console.log(`   ${index + 1}. User: ${fav.user_id.slice(0, 8)}... | Memorial: ${fav.memorial_id.slice(0, 8)}...`)
      })
    }

    // 4. Instrucciones para probar manualmente
    console.log('\nüìã INSTRUCCIONES PARA PROBAR MANUALMENTE:')
    console.log('1. Primero, agrega la pol√≠tica RLS faltante:')
    console.log('   - Ve a Supabase Dashboard > Authentication > Policies')
    console.log('   - Busca memorial_favorites > New Policy')
    console.log('   - Nombre: "Admins can insert any favorites"')
    console.log('   - Target roles: "authenticated"')
    console.log('   - Using expression: EXISTS (SELECT 1 FROM public.user_roles WHERE user_id = auth.uid() AND role = \'admin\')')
    console.log('   - Policy definition: INSERT')
    console.log('   - Guarda la pol√≠tica')
    console.log('')
    console.log('2. Luego, prueba en tu aplicaci√≥n:')
    console.log('   - Inicia sesi√≥n como administrador')
    console.log('   - Ve a un memorial (ej: /memorial/' + testMemorial.id + ')')
    console.log('   - Haz clic en el bot√≥n "Agregar a favoritos"')
    console.log('   - El coraz√≥n deber√≠a cambiar de vac√≠o a lleno')
    console.log('   - Ve a /favoritos para verificar que aparezca')
    console.log('')
    console.log('3. Si funciona, el bot√≥n deber√≠a:')
    console.log('   - Mostrar coraz√≥n vac√≠o si no est√° en favoritos')
    console.log('   - Mostrar coraz√≥n lleno si est√° en favoritos')
    console.log('   - Cambiar estado al hacer clic')
    console.log('   - Mostrar loading mientras procesa')
    console.log('   - Mostrar errores si algo falla')

    // 5. Verificar configuraci√≥n del componente
    console.log('\nüîß Verificaci√≥n de configuraci√≥n:')
    console.log('   - Componente MemorialFavoriteButton: ‚úÖ Mejorado')
    console.log('   - Tabla memorial_favorites: ‚úÖ Existe')
    console.log('   - Pol√≠ticas RLS b√°sicas: ‚úÖ Funcionando')
    console.log('   - Pol√≠tica INSERT para admins: ‚ùå FALTANTE (agregar manualmente)')
    console.log('   - Variables de entorno: ‚úÖ Configuradas')
    console.log('   - Memoriales disponibles: ‚úÖ ' + memorials.length + ' encontrados')
    console.log('   - Administradores: ‚úÖ ' + admins.length + ' configurados')

  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

// Ejecutar prueba
testFavoritesFunctionality() 