const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Error: Variables de entorno de Supabase no encontradas')
  console.log('Verifica tu archivo .env.local:')
  console.log('NEXT_PUBLIC_SUPABASE_URL=tu_url')
  console.log('SUPABASE_SERVICE_ROLE_KEY=tu_service_role_key (opcional)')
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY=tu_anon_key')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function applyPolicyDirectly() {
  console.log('üîß Aplicando pol√≠tica RLS directamente...')
  
  try {
    // M√©todo 1: Intentar con SQL directo usando service role
    console.log('\n1Ô∏è‚É£ Intentando con SQL directo...')
    
    const { data, error } = await supabase
      .from('memorial_favorites')
      .select('id')
      .limit(1)
    
    if (error) {
      console.log('‚ùå Error al acceder a la tabla:', error.message)
    } else {
      console.log('‚úÖ Acceso a tabla memorial_favorites exitoso')
    }

    // M√©todo 2: Verificar pol√≠ticas existentes usando pg_policies
    console.log('\n2Ô∏è‚É£ Verificando pol√≠ticas existentes...')
    
    try {
      const { data: policies, error: policiesError } = await supabase
        .rpc('get_policies', { table_name: 'memorial_favorites' })
      
      if (policiesError) {
        console.log('‚ö†Ô∏è No se pudo obtener pol√≠ticas con RPC')
        console.log('Error:', policiesError.message)
      } else {
        console.log('‚úÖ Pol√≠ticas encontradas:')
        policies.forEach(policy => {
          console.log(`   - ${policy.policyname}`)
        })
      }
    } catch (rpcError) {
      console.log('‚ö†Ô∏è RPC get_policies no disponible')
    }

    // M√©todo 3: Probar inserci√≥n para verificar pol√≠ticas actuales
    console.log('\n3Ô∏è‚É£ Probando inserci√≥n para diagnosticar...')
    
    const testUserId = '00000000-0000-0000-0000-000000000000'
    const testMemorialId = '00000000-0000-0000-0000-000000000000'
    
    const { error: insertError } = await supabase
      .from('memorial_favorites')
      .insert({
        user_id: testUserId,
        memorial_id: testMemorialId
      })
    
    if (insertError) {
      console.log('‚úÖ Pol√≠ticas RLS funcionando (inserci√≥n bloqueada)')
      console.log('   Error esperado:', insertError.message)
      
      if (insertError.message.includes('row-level security policy')) {
        console.log('\nüîç Diagn√≥stico:')
        console.log('   - Las pol√≠ticas RLS est√°n activas')
        console.log('   - La inserci√≥n est√° siendo bloqueada')
        console.log('   - Probablemente falta la pol√≠tica de INSERT para admins')
      }
    } else {
      console.log('‚ö†Ô∏è Pol√≠ticas RLS no est√°n funcionando correctamente')
    }

    // Instrucciones finales
    console.log('\nüìã SOLUCI√ìN MANUAL REQUERIDA:')
    console.log('1. Ve a tu proyecto Supabase Dashboard')
    console.log('2. Navega a Authentication > Policies')
    console.log('3. Busca la tabla memorial_favorites')
    console.log('4. Haz clic en "New Policy"')
    console.log('5. Configura la nueva pol√≠tica:')
    console.log('   - Nombre: "Admins can insert any favorites"')
    console.log('   - Target roles: "authenticated"')
    console.log('   - Using expression: EXISTS (SELECT 1 FROM public.user_roles WHERE user_id = auth.uid() AND role = \'admin\')')
    console.log('   - Policy definition: INSERT')
    console.log('6. Guarda la pol√≠tica')
    console.log('7. Prueba el bot√≥n de favoritos en tu aplicaci√≥n')
    
    console.log('\nüîß Verificaci√≥n de configuraci√≥n:')
    console.log(`   Supabase URL: ${supabaseUrl ? '‚úÖ Configurada' : '‚ùå Faltante'}`)
    console.log(`   Service Role Key: ${process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Configurada' : '‚ùå Faltante (usando anon key)'}`)
    console.log(`   Anon Key: ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Configurada' : '‚ùå Faltante'}`)

  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

// Ejecutar aplicaci√≥n de pol√≠tica
applyPolicyDirectly() 